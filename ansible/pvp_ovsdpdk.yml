- name: pvp_ovsdpdk setup
  hosts: dut
  vars_files:
    - ./test_settings.yml
  tasks:
  - debug:
      msg: Debug mode is enabled
    when: redhat_debug_mode == true

#################################################
# Check for nic to make sure its seen by kernel #
#################################################

  - stat: path=/sys/class/net/{{ dut_interface_1 }}
    register: st
  - block:
    - name: "Checking nic to be seen by kernel"
      debug:
        msg: "exiting as nic {{ dut_interface_1 }} cannot be seen by the kernel.  Please check settings or unbind the nic from a dpdk driver using driverctl"

    - meta: end_play
    when: not st.stat.exists

######################################
# Install repositories on DUT server #
######################################

  - name: Install FedoraProject Repo
    yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
  - name: Install needed repos stage 1
    yum:
      name: aspell,aspell-en,autoconf,automake,bc,checkpolicy
  - name: Install needed repos stage 2
    yum:
      name: desktop-file-utils,dpdk,dpdk-tools,driverctl,emacs,expect,gcc,gcc-c++,gdb
  - name: Install needed repos stage 3
    yum:
      name: git,graphviz,hwloc,intltool,libcap-ng
  - name: Install needed repos stage 4
    yum:
      name: libcap-ng-devel,libguestfs,libguestfs-tools-c,libtool,libvirt
  - name: Install needed repos stage 5
    yum:
      name: lshw,openssl,openssl-devel,procps-ng,python3
  - name: Install needed repos stage 6
    yum:
      name: python3-six,rpm-build,selinux-policy-devel,sshpass,sysstat
  - name: Install needed repos stage 7
    yum:
      name: systemd-units,tcpdump,time,tmux,tuned-profiles-cpu-partitioning
  - name: Install needed repos stage 8
    yum:
      name: virt-install,virt-manager,wget
  - name: Installing openvswitch packages
    yum:
      name: "{{ ovs_selinux_rpm_path }}, {{ ovs_rpm_path }}"
    when: redhat_debug_mode == true
  - name: Create symbolic link for python3
    file:
      src: "/usr/bin/python3"
      dest: "/usr/bin/python"
      state: link
  - name: Create symbolic link for pip3
    file:
      src: "/usr/bin/pip3"
      dest: "/usr/bin/pip"
      state: link

####################################################
# Tweak the system for QEMU and and OVS-DPDK usage #
####################################################

  - name: Modifying selinux params step 1
    shell: sed -i -e 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config
  - name: Modifying selinux params step 2
    shell: setenforce permissive

#####################################################
# Modify startup parameters for hugepages and iommu #
#####################################################

  - name: Checking for hugepages in grub step 1 (Fatal errors are normal here)
    shell: "cat /proc/cmdline | grep hugepages=32"
    register: hugepages_found1
    ignore_errors: True
  - debug:
      var: hugepages_found1
    when: redhat_debug_mode == true
  - name: Checking for hugepages in grub step 2 (Fatal errors are normal here)
    shell: "cat /proc/cmdline | grep hugepagesz=1G"
    register: hugepages_found2
    ignore_errors: True
  - debug:
      var: hugepages_found2
    when: redhat_debug_mode == true
  - name: Checking for hugepages in grub step 3 (Fatal errors are normal here)
    shell: "cat /proc/cmdline | grep default_hugepagesz=1G"
    register: hugepages_found3
    ignore_errors: True
  - debug:
      var: hugepages_found3
    when: redhat_debug_mode == true
  - name: Checking for iommu in grub step 1 (Fatal errors are normal here)
    shell: "cat /proc/cmdline | grep iommu=pt"
    register: iommu_found1
    ignore_errors: True
  - debug:
      var: iommu_found1
    when: redhat_debug_mode == true
  - name: Checking for iommu in grub step 2 (Fatal errors are normal here)
    shell: "cat /proc/cmdline | grep intel_iommu=on"
    register: iommu_found2
    ignore_errors: True
  - debug:
      var: iommu_found2
    when: redhat_debug_mode == true
  - name: Tweak the kernel for hugepages and iommu step 2
    shell: "grubby --args='intel_iommu=on iommu=pt default_hugepagesz=1G hugepagesz=1G hugepages=32' --update-kernel=$(grubby --default-kernel)"
    when: iommu_found1.rc != 0 or iommu_found2.rc != 0 or hugepages_found1.rc != 0 or hugepages_found2.rc != 0 or hugepages_found3.rc != 0
    tags: ["grub"]

#########################
# Setup libvirt service #
#########################

  - name: group = 'hugetlbfs' in /etc/libvirt/qemu.conf
    lineinfile:
      path: /etc/libvirt/qemu.conf
      regexp: '^group[[:space:]]*=.*'
      line: "group = 'hugetlbfs'"
      state: present
    register: result_hugetlbfs
  
  - name: restart service libvirtd
    systemd:
      name: libvirtd
      enabled: yes
      state: restarted
      daemon_reload: yes
    when: result_hugetlbfs.changed

############################################
# Get needed cpu list #
############################################

  - name: Copy up cpulist script to remote DUT
    copy:
      src: get_cpulist.sh
      dest: /root/get_cpulist.sh
  - name: Changing perm of "/root/get_cpu_list.sh", adding "+x"
    file: dest=/root/get_cpulist.sh mode=a+x
  - name: check cpu requirement
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} dut_isolated_cpus
    register: cpu_meet
  - block:
      - debug:
          msg: cpu list can't meet the test requirement,exit the script
      - meta: end_play
    when: cpu_meet.rc != 0
  - name: Get dut_isolated_cpus
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} dut_isolated_cpus
    register: dut_isolated_cpus
  - debug:
      var: dut_isolated_cpus
    when: redhat_debug_mode == true
  - name: Get dut_dpdk_pmd_mask
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} dut_dpdk_pmd_mask
    register: dut_dpdk_pmd_mask
  - debug:
      var: dut_dpdk_pmd_mask
    when: redhat_debug_mode == true
  - name: Get dut_pmd_rxq_affinity
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} dut_pmd_rxq_affinity
    register: dut_pmd_rxq_affinity
  - debug:
      var: dut_pmd_rxq_affinity
    when: redhat_debug_mode == true
  - name: Get vcpu_0
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_0
    register: vcpu_0
  - debug:
      var: vcpu_0
    when: redhat_debug_mode == true
  - name: Get vcpu_1
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_1
    register: vcpu_1
  - debug:
      var: vcpu_1
    when: redhat_debug_mode == true
  - name: Get vcpu_2
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_2
    register: vcpu_2
  - debug:
      var: vcpu_2
    when: redhat_debug_mode == true
  - name: Get vcpu_3
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_3
    register: vcpu_3
  - debug:
      var: vcpu_3
    when: redhat_debug_mode == true
  - name: Get dut_dpdk_lcore_mask
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} dut_dpdk_lcore_mask
    register: dut_dpdk_lcore_mask
  - debug:
      var: dut_dpdk_lcore_mask
    when: redhat_debug_mode == true
  - name: Get vcpu_emulator
    shell: ./get_cpulist.sh {{ dut_interface_1_pciid }} vcpu_emulator
    register: vcpu_emulator
  - debug:
      var: vcpu_emulator
    when: redhat_debug_mode == true


############################################
# Tune isolated cpus based on t-rex config #
############################################

  - name: Checking for isolcpus in grub (Fatal errors are normal here)
    shell: >
      grep "nohz_full={{ dut_isolated_cpus.stdout }}" /proc/cmdline &&
      grep "rcu_nocbs={{ dut_isolated_cpus.stdout }}" /proc/cmdline
    failed_when: false
    ignore_errors: yes
    register: isolcpus_needed
  - name: Adding isolated cpus to tuned
    lineinfile:
       path: //etc/tuned/cpu-partitioning-variables.conf
       regexp: "^isolated_cores=.*"
       line: "isolated_cores={{ dut_isolated_cpus.stdout }}"
       state: present
  - name: Starting cpu-partitioning tuned profile
    shell: tuned-adm profile cpu-partitioning
  - name: restart service tuned
    systemd:
      name: tuned
      enabled: yes
      state: restarted
      daemon_reload: yes

###################################################
# Reboot t-rex system for settings to take effect #
###################################################

  - name: REBOOTING DUT SERVER NOW
    reboot:
    when: iommu_found1.rc != 0 or iommu_found2.rc != 0 or hugepages_found1.rc != 0 or hugepages_found2.rc != 0 or hugepages_found3.rc != 0 or isolcpus_needed.rc !=0

####################
# Getting NIC info #
####################

  - name: get driver
    shell: "ethtool -i {{ dut_interface_1 }} | sed -n '/driver: / s/driver: //p'"
    register: nic_driver
  - name: Getting pci address of NIC 1
    shell: "ethtool -i {{ dut_interface_1 }} | grep bus-info | awk '{print $2}'"
    register: dut_nic1_pci_address
  - name: finding numa node of nic
    shell: cat /sys/class/net/{{ dut_interface_1}}/device/numa_node
    register: nic1_numa
  - debug:
      var: dut_nic1_pci_address
    when: redhat_debug_mode == true
  - name: Binding nic {{ dut_interface_1 }} to driver {{ dut_driver }}
    shell: "driverctl -v set-override {{ dut_nic1_pci_address.stdout }} {{ dut_driver }}"
    ignore_errors: True
    when: nic_driver.stdout != 'mlx5_core'

################################
# Starting openvswitch service #
################################

  - name: Enable service openvswitch
    service:
      name: openvswitch
      enabled: yes
  - name: Start service openvswitch, if not started
    service:
      name: openvswitch
      state: started

############################
# Starting OVS-DPDK config #
############################

  - name: Setting up OVS-DPDK config step 1
    shell: "ovs-vsctl set Open_vSwitch . other_config:dpdk-init=true"
  - name: Setting up OVS-DPDK config step 2
    shell: ovs-vsctl set Open_vSwitch . other_config:dpdk-socket-mem=4096
  - name: Setting up OVS-DPDK config step 3
    shell: ovs-vsctl set Open_vSwitch . other_config:pmd-cpu-mask={{ dut_dpdk_pmd_mask.stdout }}
  - name: Setting up OVS-DPDK config step 4
    shell: ovs-vsctl set Open_vSwitch . other_config:dpdk-lcore-mask={{ dut_dpdk_lcore_mask.stdout }}
  - name: Restart service openvswitch
    service:
      name: openvswitch
      state: restarted
  - name: Setting up OVS-DPDK config step 5
    shell: ovs-vsctl --if-exists del-br ovs_pvp_br0
  - name: Setting up OVS-DPDK config step 6
    shell: ovs-vsctl add-br ovs_pvp_br0 -- set bridge ovs_pvp_br0 datapath_type=netdev
  - name: Setting up OVS-DPDK config step 7
    shell: "ovs-vsctl add-port ovs_pvp_br0 dpdk0 -- set Interface dpdk0 type=dpdk -- set Interface dpdk0 options:dpdk-devargs='{{ dut_nic1_pci_address.stdout }}' -- set interface dpdk0 options:n_rxq=2 other_config:pmd-rxq-affinity='{{ dut_pmd_rxq_affinity.stdout }}' -- set Interface dpdk0 ofport_request=1"
  - name: Setting up OVS-DPDK config step 8
    shell: "ovs-vsctl add-port ovs_pvp_br0 vhost0 -- set Interface vhost0 type=dpdkvhostuserclient -- set Interface vhost0 options:vhost-server-path='/tmp/vhost-sock0' -- set interface vhost0 options:n_rxq=2 other_config:pmd-rxq-affinity='{{ dut_pmd_rxq_affinity.stdout }}' -- set Interface vhost0 ofport_request=2"

##############################
# Setting up Virtual machine #
##############################
  - stat: path=/opt/images
    register: st
  - name: Creates directory for image storage
    file:
      path: /opt/images
      state: directory
    when: not st.stat.exists
  - stat: path=/opt/images/{{ rhel_guest_image_path | basename }}
    register: st
  - name: Copy image to /opt/images
    copy:
      src: "{{ rhel_guest_image_path }}"
      dest: /opt/images/rhel_guest_image_pvp.qcow2
      remote_src: yes
    when: not st.stat.exists
  - name: Configuring VM
    shell: LIBGUESTFS_BACKEND=direct virt-customize -a /opt/images/rhel_guest_image_pvp.qcow2 --root-password password:root --uninstall cloud-init
  - name: Checking status of rhel_loopback image
    virt:
      command: list_vms
    register: all_vms
  - debug:
      var: all_vms
    when: redhat_debug_mode == true
  - name: Stopping rhel_loopback if its started
    virt:
      name: rhel_loopback
      command: destroy
    ignore_errors: yes
    when: '"rhel_loopback" in all_vms.list_vms'
  - name: Undefining rhel_loopback if needed
    shell: virsh undefine rhel_loopback
    when: '"rhel_loopback" in all_vms.list_vms'

  #set static IP address 192.168.122.123 for internet access in guest g1
  - shell: virsh net-list | grep default || virsh net-define /usr/share/libvirt/networks/default.xml
  - shell: virsh net-autostart default
  - shell: virsh net-list | grep default | grep active || virsh net-start default
  - shell: >
      virsh net-dumpxml default | grep "mac='52:54:00:01:02:03'" &&
      virsh net-update default modify ip-dhcp-host "<host mac='52:54:00:01:02:03' ip='192.168.122.5'/>" --live --config ||
      virsh net-update default add ip-dhcp-host "<host mac='52:54:00:01:02:03' ip='192.168.122.5'/>" --live --config

  - name: Running virt-install
    shell: virt-install --connect=qemu:///system --network vhostuser,source_type=unix,source_path=/tmp/vhost-sock0,source_mode=server,model=virtio,driver_queues=2 --network network=default,mac=52:54:00:01:02:03 --name=rhel_loopback --disk path=/opt/images/rhel_guest_image_pvp.qcow2,format=qcow2 --ram 8192 --memorybacking hugepages=on,size=1024,unit=M,nodeset=0 --vcpus=4,cpuset={{ vcpu_0.stdout }},{{ vcpu_1.stdout }},{{ vcpu_2.stdout }},{{ vcpu_3.stdout }} --check-cpu --cpu mode=host-passthrough,+pdpe1gb,cell0.id=0,cell0.cpus=0,cell0.memory=8388608 --numatune mode=strict,nodeset=0 --nographics --noautoconsole --import
  - name: Wait vm to start
    pause:
      seconds: 60
  - name: Setting permissions on vhost socket folder
    file:
       path: /tmp/vhost-sock0
       mode: 777
  - name: Setting cpu pin for vcpu 0
    shell: virsh vcpupin rhel_loopback 0 {{ vcpu_0.stdout }}
  - name: Setting cpu pin for vcpu 1
    shell: virsh vcpupin rhel_loopback 1 {{ vcpu_1.stdout }}
  - name: Setting cpu pin for vcpu 2
    shell: virsh vcpupin rhel_loopback 2 {{ vcpu_2.stdout }}
  - name: Setting cpu pin for vcpu 3
    shell: virsh vcpupin rhel_loopback 3 {{ vcpu_3.stdout }}
  - name: Setting emulator pin for guest
    shell: virsh emulatorpin rhel_loopback {{ vcpu_emulator.stdout }}
  - name: copying virsh console script to default location
    copy:
      src: ./vm.sh
      dest: ~/vm.sh
      mode: "777"
  - name: Logging into vm rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Setting up subscription manager step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager register --username={{ rh_sub_username }} --password={{ rh_sub_pass }}"
    when: not qe_subscription_mode
  - name: Setting up subscription manager step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager attach --pool={{ rh_sub_pool_id }}"
    when: not qe_subscription_mode
  - name: Using QE Secret sauce to add subscription for repos
    shell: ~/vm.sh run_cmd rhel_loopback "{{ qe_subscription_command }}"
    when: qe_subscription_mode
  - name: subscribing to appstream on VM rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "subscription-manager repos --enable rhel-8-for-x86_64-appstream-rpms"
  - name: Running yum commandset step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y clean all"
  - name: Running yum commandset step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y update"
  - name: Running yum commandset step 3 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y install driverctl gcc kernel-devel numactl-devel tuned-profiles-cpu-partitioning wget libibverbs dpdk-tools"
  - name: Running yum commandset step 4 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "yum -y update kernel"
  - name: Modifying grub for tuning on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "grubby --args='disolcpus=1,2,3 default_hugepagesz=1G hugepagesz=1G hugepages=2' --update-kernel=ALL"
  - name: Setting vfio options on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "echo 'options vfio enable_unsafe_noiommu_mode=1' > /etc/modprobe.d/vfio.conf"
  - name: Binding nic to vfio-pci on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "driverctl -v set-override 0000:00:02.0 vfio-pci"
  - name: Starting tuned service step 1 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "systemctl enable tuned"
  - name: Starting runed service step 2 on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "systemctl start tuned"
  - name: Setting isolated cores for tuning profile on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "echo isolated_cores=1,2,3 >> /etc/tuned/cpu-partitioning-variables.conf"
  - name: Starting tuned profile cpu-partitioning on rhel_loopback
    shell: ~/vm.sh run_cmd rhel_loopback "tuned-adm profile cpu-partitioning"
  - name: Rebooting vm rhel_loopback step 1
    virt:
      name: rhel_loopback
      state: shutdown
  - name: Wait system some time to shutdown
    pause:
      seconds: 5
  - name: Rebooting vm rhel_loopback step 2
    virt:
      name: rhel_loopback
      state: running
  - name: Wait vm to start
    pause:
      seconds: 60
  - name: Logging into VM rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Logging into vm rhel_loopback
    shell: ~/vm.sh login_vm rhel_loopback
  - name: Getting IP address from VM
    shell: ~/vm.sh run_cmd rhel_loopback "ip a | grep inet | grep brd | awk '{ print \$2 }'" | grep -A 1 "ip a \| grep inet \| grep brd"   | tail -n 1
    register: vm_ip
  - debug:
      msg: Please note the ip address of the VM as it will be needed when executing the pvp test scripts {{ vm_ip.stdout }}
